c
level1.rewards
level1
c
matching_level.rewards
c
matching_level.rewards
c
matching_level.rewards
matching_level
Reward
c
cc
c
User
Bonus
ActiveRecord::Base.connection.tables
::Bonus
Bonus
c
::Bonus
Bonus
c
Reward
Level
c
CgtraderLevels::Reward
::Reward
Reward
matching_level.rewards
matching_level
level
self.rewards
self
reward
plurarize
"reward".plularize
reward.plularize
matching_level.rewards
c
matching_level.rewards
c
matching_level.rewards
c
cc
c
git status
v
git status
ActiveRecord::Base.connection.schema_search_path
matching_level.users
matching_level.rewards
c
matching_level.rewards
c
cc
c
matching_level.rewards
matching_level
level
level.rewards
c
level.users
c
level.user
level.users
level
c
level
c
return unless previous_changes[:reputation]
previous_changes[:reputation]
c
previous_changes[:reputation]
c
saved_change_to_reputation?
previous_changes
c
previous_changes
c
previous_changes
saved_change_to_reputation?
c
CgtraderLevels::Level.where(experience: ..reputation).order(experience: :desc)
CgtraderLevels::Level.where(experience: ..reputation).order(expierence: :desc)
CgtraderLevels::Level.where(experience: ..reputation).order(reputation: :asc)
CgtraderLevels::Level.where(experience: ..reputation).order(:reputation)
CgtraderLevels::Level.where(experience: ..reputation).order(reputation: :desc)
CgtraderLevels::Level.where(experience: ..reputation).order(reputation: :desc).second
CgtraderLevels::Level.where(experience: ..reputation).order(reputation: :desc).count
CgtraderLevels::Level.where(experience: ..reputation).order(reputation: :desc).first
reputation
c
reputation
self.reload
c
self.reload
self
reputation
Level.second
Level.first
Level.count
Level
CgtraderLevels::Level.where(experience: ..reputation).order(reputation: :desc).count
CgtraderLevels::Level.where(experience: reputation).order(reputation: :desc).first
c
user.level
user
